# Yaml Pipeline Tasks for reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/index?view=vsts

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - CONTRIBUTING.md
    
pool:
  vmImage: 'windows-2022'

variables:
  solution: '*.sln'
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  major: 6
  minor: 2

  # creates a named counter and seeds it at 100 and then assigns the value to a variable named buildNo.
  buildNo: $[counter('winversioncounter', 100)]
  
name: $(BuildDefinitionName)_$(SourceBranchName)_$(major).$(minor).$(buildNo)

steps:

# Windows script setting up  $(packageversion) of the nuget package based on branch
# Master branch
- script: |
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)
  displayName: 'Setting Nuget PackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
# Any other branch
- script: |
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)-$(Build.SourceBranchName)
  displayName: 'Setting Prerelease Nuget PackageVersion'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

# Windows script setting up $(fileversion) used to stamp AssemblyFileVersions. 
# By convention we use 'Major.Minor.BuildNo.0' on Master and 'Major.Minor.0.BuildNo' on other branches
# Master branch
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).$(buildNo).0
  displayName: 'Setting FileVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

# Any other branch
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).0.$(buildNo)
  displayName: 'Setting Prerelease FileVersion'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

- task: DotNetCoreCLI@2
  displayName: 'Restoring packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'config'
    nugetConfigPath: 'nuget.config'
    externalFeedCredentials: 'MyGetDev, MyGetMaster'

- task: DotNetCoreCLI@2
  displayName: 'Build and Packing'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'off'

- task: CopyFiles@2
  displayName: 'Copy Nuget packages to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\*.nupkg'
    TargetFolder: '$(build.artifactstagingdirectory)'
  
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: NuGetCommand@2
  displayName: 'Pushing to Master'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'MyGetMaster'
    versioningScheme: byEnvVar
    versionEnvVar: packageVersion

- task: NuGetCommand@2
  displayName: 'Pushing to MyGet Dev'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'MyGetDev'
    versioningScheme: byEnvVar
    versionEnvVar: packageVersion

- task: NuGetCommand@2
  displayName: 'Pushing to Develop'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '2591d379-784d-4b57-88f5-a932c93cbffd'